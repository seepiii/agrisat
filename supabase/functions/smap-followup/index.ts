import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface FollowUpRequest {
  question: string;
  region: string;
  subregion: string;
  soilMoisture: number;
  date: string;
  aiContext: Array<{ role: string; content: string }>;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { question, region, subregion, soilMoisture, date, aiContext }: FollowUpRequest = await req.json();
    
    // Get the Python backend URL from environment
    const backendUrl = Deno.env.get('PYTHON_BACKEND_URL') || 'http://localhost:8000';
    
    console.log(`🤖 Processing follow-up question for ${subregion}: ${question}`);
    console.log(`🔗 Calling Python backend at: ${backendUrl}`);

    // Call the Python backend for follow-up processing
    const response = await fetch(`${backendUrl}/followup`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        question,
        region,
        subregion,
        soil_moisture: soilMoisture,
        date,
        ai_context: aiContext
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Backend request failed: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    
    if (!result.success) {
      throw new Error(result.error || 'Failed to generate response');
    }

    console.log('✅ Follow-up response generated by Python backend');

    return new Response(JSON.stringify({
      question: result.question,
      answer: result.answer,
      success: true
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('❌ Follow-up error:', error);
    return new Response(JSON.stringify({
      error: error.message,
      success: false
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function getSeason(date: Date): string {
  const month = date.getMonth() + 1;
  if (month >= 3 && month <= 5) return 'Spring';
  if (month >= 6 && month <= 8) return 'Summer';
  if (month >= 9 && month <= 11) return 'Fall';
  return 'Winter';
}